package springboot.services;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Lazy;  // Add this import
import org.springframework.security.core.GrantedAuthority;
import org.springframework.security.core.authority.SimpleGrantedAuthority;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.security.core.userdetails.UserDetailsService;
import org.springframework.security.core.userdetails.UsernameNotFoundException;
import org.springframework.stereotype.Service;
import springboot.models.CustomUserDetails;
import springboot.models.User;

@Service
public class CustomUserDetailsService implements UserDetailsService {

    private final UserService userService;

    // Use @Lazy on the UserService to break the circular dependency
    @Autowired
    public CustomUserDetailsService(@Lazy UserService userService) {
        this.userService = userService;
    }

    @Override
    public UserDetails loadUserByUsername(String email) throws UsernameNotFoundException {
        User user = userService.findByEmail(email);
        if (user == null) {
            throw new UsernameNotFoundException("User not found");
        }

        // Assign authority based on user role
        GrantedAuthority grantedAuthority = new SimpleGrantedAuthority(user.getRole().name());

        // Return CustomUserDetails with authority
        return new CustomUserDetails(user, grantedAuthority);
    }
}
